This is a fork of pydaap, the Python-based daap library.

This aims to be a wrapper to expose a user's Google Music library as a DAAP
share on the network.

Why was pydaap written?  There doesn't seem to exist a standalone daap library
that can be used in a cross-platform fashion for the use-case that Miro is
anticipating.

We do however borrow heavily from existing projects, in trying to write this
we hope that there is a decoupling of the protocol implementation and an
embedding application so this can be used elsewhere.

Many thanks to Geoffrey Lee for writing pydaap!

To build and install:

python buildconst.py
python setup.py install

Note: This installs the libdaap package only.

The pydaap package also includes reference implementations of a server
and client using libdaap, called daapd.py and daap.py respectively.  If you
just want to try these programs out within the source directory there is no
need to install libdaap on your system.

To run the server:

python daapd.py [GMusic ClientLogin token]

Optional options for server:

-v: display version
-h: display help
-M: do not publish music share via Bonjour
-c <maxconn>: set maximum client connections (default is 10)
-p <port>: alternate port, default=3689, 0 to pick a unused port

To run the client:

python daap.py <host>

-v: display version
-h: display help

note: If you need to specify a port, use <host>:<port> format.

daap.py also contains a Bonjour browse, which you can invoke via:

python daap.py -S

This will run forever, ^C on Unix to exit.

Thanks goes to the existing implementators of open source daap clients
and servers and especially to forked-daapd of which the authors have
used extensively for source-level documentation.

The author would also like to thank 3rd party Python modules which this
program utilizes, which is credited in the CONTRIB file.

