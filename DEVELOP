Developing using libdaap

How does it all fit in?

Have a look at daapd.py and daap.py, a reference implementation of
the server and client respectively, to get started.  It does not support
or take advantage of all the advanced features of libdaap however.

How to create a daap server in 5 seconds:

import libdaap

Call libdaap.make_daap_server() with the backend as the argument (more on this
later).  This returns a server instance.

Call libdaap.runloop() with the server as the argument.

How to create a daap client in 5 seconds:

import libdaap

Call libdaap.make_daap_client().  This returns a daap client instance.
You then call connect() on the returned object to connect to a server.

Bonjour sharing:

You may also consider to use Bonjour sharing, you can turn this on and
off with libdaap.mdns_register_service().  This function returns a reference 
which you can destroy with libdaap.mdns_unregister_service().

Call libdaap.mdns_browse() to have Bonjour notify you when new shares
are published on the network.

Advanced server options:

NOTE: If robust=True argument is set (the default) the server creation 
is "robust".  This means if if cannot find the port specified it will pick
an unused port.  For this reason, when you install mdns sharing you must
always check the port returned by the server.  You can do:

address, port = serverobj.server_address

to obtain the port from the server object.

An alternative way to run the server is to obtain the server's socket
descriptor, then you work out when the socket is readable then issue
a handle_request() method on it.

There are more arguments to these functions to change the port settings
among others, refer to the source code for help.

Security considerations:

When things are in string format, the data can be free-form.  In particular,
it can include the NUL character, because the length is encoded into the
message.  Therefore, when you access strings received from the user, you should
be aware that while the things may be encoded into the Python 'str' type,
NUL characters may appear anywhere within the data.  It is advisable to strip
it out when you know you won't need it (which is most of the cases).  Pydaap
does not strip this out for you, in case that the server may decide to send
NUL characters, though in practice this is almost always an error.

Backend API reference

The backend is basically a object-based class that can get item information
from whatever backing store is used.

You MUST implement the following functions in order to have a minimal
functional backend: get_revision(), get_items(), get_file(), and get_playlists().

What follows below is a full list of implementable functions.

get_revision(session, old_revision)

Gets the current revision number of the database.  This allows you to implement
do "push" notifications of updates to clients.  The old_revision is what
the client the revision of the database the client has.  If the current
version of the database on the server is the same as the client, this function
blocks the calling thread.  Otherwise, this function returns with the
current version of the database.

If you do not intend to support push notifications, then, on the first
invocation of get_revision(), you should return old_revision + 1.  On
subsequent invocations, you should block the calling thread forever until
the session is finished.

See the section "Implementing push notifications" for more information on how
this is used.

get_items(playlist_id=None)

Returns an item listing of available items.  This is a dictionary of items that
is indexed by a numeric item identifier that is > 0.

The items themselves are also dictionaries, which contain a key/value 
mapping where the key is a certain daap property (e.g. key = dmap.itemid,
value = 12345).  Your items must also support 2 special keys, 'revision' and
'valid'.  This is used to implement push notifications.  If you do not intend
to support this, set valid=True and revision to be the revision you returned
to the client on first invocation of get_revision().  See the section 
"Implementing push notifications" on what you must do to support this.

If your backend has playlist support, then you must also implement the
playlist_id argument.  When the playlist_id argument is None, return
all available items.  Otherwise, returns items for the specified playlist_id.

get_playlists()

If your backend does not implement playlist suport, you should return an
empty dictionary.

If your backend has playlist support, you should return a dictionary mapping
of available playlists, indexed by a numeric playlist identifier that is > 2.

The playlists themselves are also dictionaries, which contain a key/value
mapping where the key is a certain daap property (e.g. key = dmap.itemid,
value = 12345).  Your playlists must also support 2 special keys, 'revision' 
and 'valid'.  This is used to implement push notifications.  If you do not 
intend to support this, set valid=True and revision to be the revision you 
returned to the client on first invocation of get_revision().  See the section 
"Implementing push notifications" on what you must do to support this.

get_file(itemid, generation, ext, session, request_path_func,
         offset=0, chunk=None)

Return the Python file object for the given itemid.  The function also
provides extra information that allows you to do certain transformations on the
file or housekeeping before you pass it back off to the daap server to
send to the client.  At a minimum, you will need to make use of the itemid
(so you can send back the correct item).

itemid refers to the numeric item identifier requested.

generation refers to the request generation which is increased every time a
fresh request is received from the client.  It allows you to impose ordering
on the servicing of requests.  This generation is strictly monotonic increasing
for a particular login session, but not across different login sessions.

ext provides the extension requested in the item request.  It allows you to
arbitrary interpretation on what data needs to be sent back.  Usually, it
will be something like 'mp3', 'mp4', etc.

session provides the session id for the particular login session associated
with this file request.

request_path_func provides a function of the form:

    get_request_path(itemid, enclosure)

Which allows you to build an request string for the given itemid.

offset provides the offset into the file that you are requesting, which
allows you to implement range support.

chunk returns a numeric identifier passed to the server in the chunk= 
query string.

request_path_func, chunk, ext, generation and session parameters provide
a way to do fairly arbitrary manipulation and transformation of data.  For
example, it may be used to build a m3u8 playlist on the fly, build
mp4 live streaming segmented chunks on the fly for transcoding support.

Implementing push notifications:

Push notifications requires both server and client support.  This is the 
sequence of events that you should follow:

Client: check for msup in the content codes reply during login.  If present
then server is indcating there is server support for push notifications.

Client: Send an update request with revision-number query string set to 1.

Server: Your get_revision() implementation should respond immediately
with a revision > 1.  This helps the client request the initial revision
from the server.

During playlist (container) and item requests, the client may send
revision-number=xxx and delta=xxx in the query string.  Revision-number
indicates the revision of the database you are after, delta indicates
the revision of the database you already have.

In your items and your playlists, the 'revision' indicates the
revision for the current item/playlist.  'valid' indicates whether it is
valid.  True means that the item exists, False means that it has been removed.
If the delta=xxx query string is present, items or playlists are sent
satisfying item['revision'] <= delta.  Deleted items (valid=False)
still need to support the 'revision' key and the 'valid' keys.  You may,
at your option, choose to send redundant items, e.g. request to re-send a 
deleted item that has already been deleted in a previous revision.

When you make a change to a playlist or an item (e.g. adding an item to a
playlist, change the title of an item, etc.), update the revision of the item
or playlist and unblock the blocked thread in get_revision().  This indicates
to the client something's changed.

Important note: for item deletion to work within playlists using iTunes
as a client, you must support dmap.itemcontainerid.  You can set it to be the
same as dmap.itemid.

Common errors:

Server returns a HTTP 403 - this could be several errors.

(1) You have tried to obtain an invalid item or you have issued an invalid
GET request that DAAP did not understand.  Many of the daap commands require
a session id which you obtain via the /login GET request.

(2) Your session has expired.  A session expires after inactivity (currently
1800 seconds) or alternatively, your daap control connection expires.
Typically, daap client implementations issue an initial connection to the
server (control connection) then issue a new connection when they try
to stream actual files (data connection).  In the case of pydaap, the
session expires when your control connection is closed.  For this reason,
you should keep the control connection alive even when you are streaming 
video.  Common mistakes include using HTTP/1.0 or using a HTTP programming
interface that adds the Connection: close headers to HTTP/1.1 connections.

The reason for doing so is it's much easier to work out whether a remote
host has gone.  For example, if a remote host connects, then does a media
listing then closes the connection.  Is the remote host done with the
session?  Or is the user just busy doing something else?  Destroying the
session on socket close seems to work with the major daap implementations and 
so this is exactly what the pydaap server implementation does.

Some implementation details: when you issue a /login request in the
control connection, a session id is created for you centrally, within the
HTTP server object.  This gets sent back to the client, but a reference
to this session id is kept in the connection handle.  When you stream, 
you initiate a new HTTP session ("data connection") with a session id 
provided to you previously as part of the query string of the HTTP request.  
This creates a new HTTP request handler.

When a connection is either closed normally (in finish() method) or abruptly 
terminated (as part of IOError exception handling, possibly a SIGPIPE), the 
code deletes the session based on the session id stored in the HTTP 
request handler.  As there is no reference to the id in the data connection,
it is immune to getting sessions deleted.  This means clients may close
data connections as they please (e.g. when user fast forward or skip over
media items) without adversely affecting the session.

When your control connection is terminated, the session disappears, at this
point you cannot rely on your session working, and the server has a right
to terminate your data connection abruptly.

Can't connect to any recent version iTunes.

Since iTunes version 7, there is a cryptographic authentication process which 
has not yet been broken, so it's impossible to connect.  This is the 
same across the board of all the open source clients that rely on a 
reverse-engineered daap protocol implementation.  There's currently no way
to test that this is the case other than that your connection failed, but
we may want to add support for this if there's a good way to do so that's
not too intrusive.

You can, however, use iTunes as a client and connect to a pydaap server.

No password support.  

pydaap does not yet support this.  It may be supported in a future version.

Rhythmbox (or possibly any other GStreamer-based application) cannot
stream from the reference daapd.py server.

We think it's because the reference server does not send the song duration 
data.  You'll need to implement a backend which supports this.


