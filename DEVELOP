Developing using libdaap

Call libdaap.make_daap_server() with the backend as the argument (more on this
later).  This returns a server instance.

Call libdaap.runloop() with the server as the argument.

You may also consider to use Bonjour sharing, you can turn this on and
off with libdaap.install_mdns() with a sharename as an argument.  This
function returns a reference which you can destroy with 
libdaap.uninstall_mdns().

There are more arguments to these functions to change the port settings
among others, refer to the source code for help.

Notes on backend:

The backend is basically a object-based class that can get item information
from whatever backing store is used.

You must implement these functions:

get_items(): This gets a listing of the items in "native" format that
the server frontend expects.  In the case of libdaap, this is a
dictionary indexed by a numeric identifier (which must be > 0), and
tuples of daap/dmap codes and their corresponding values.  If you implement
playlist support you must also implement the playlist_id argument which only
returns items for a particular playlist.

get_playlists(): This can be stubbed out to return an empty list: [].  If
you don't then you must return the playlists in native libdaap format which
is a list of (mlit, [...]) listing of playlist items.  Refer to the libdaap
source code for the default 'Library' playlist on how to build one.  If you
implement this you must also implement the optional playlist_id argument
in get_items().

get_filepath(itemid): Get the full path to the file for the itemid.

For client, call libdaap.make_daap_client(host, port=xxx) to make a
client object.  The port=xxx is optional defaults to the default daap port.

Call the connect() method to connect to a share, disconnect() to disconnect,
and daap_get_file_request(file_id) to return a path you can request via
http (recall daap is http-based).

Call libdaap.browse_mdns(callback) to browse for daap shares and have it
notify you via the callback when things are published or removed.
Callback has signature:

callback(added, fullname, hosttarget, port)

